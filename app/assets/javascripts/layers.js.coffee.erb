@Layers = {
  map: null,
  
  icons: {
    coal: L.icon({
      iconUrl: '<%= image_path("icons/coal-32.png") %>',
      iconSize: [32, 32],
      iconAnchor: [16, 16],
      popupAnchor: [16, -3]
    }),
    
    for_class: (klass, cluster = null, size = null) ->
      if size?
        iconSize = size
      else
        iconSize = L.point(40, 40)  
      
      if cluster? and cluster.getChildCount?
        text = cluster.getChildCount() 
      else
        text = ''
        
      return L.divIcon({ html: "<div><span>#{text}</span></div>", className: "base-cluster #{klass}" , iconSize: iconSize })
    
    fish_processor: (cluster = null) ->
      if cluster? and cluster.getChildCount?
        text = cluster.getChildCount() 
      else
        text = ''
        
      return L.divIcon({ html: "<div><span>#{text}</span></div>", className: 'base-cluster fish_processor', iconSize: new L.Point(61, 17), iconAnchor: new L.Point(30, 8) })
  },
  
  defs: {
    'biomass-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/biomass-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('biomass', cluster)
        })
        markers.addLayer(Layers.for_class('biomass', geojson))
        markers
    },
    'geothermal-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/geothermal-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('geothermal', cluster)
        })
        markers.addLayer(Layers.for_class('geothermal', geojson))
        markers
    },
    'hydro-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/hydro-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('hydro', cluster)
        })
        markers.addLayer(Layers.for_class('hydro', geojson))
        markers
    },
    'wind-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/wind-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('wind', cluster)
        })
        markers.addLayer(Layers.for_class('wind', geojson))
        markers
    },
    'transmission-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/transmission-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('transmission', cluster)
        })
        markers.addLayer(Layers.for_class('transmission', geojson))
        markers
    },
    'solar_thermal-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/solar_thermal-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('solar_thermal', cluster)
        })
        markers.addLayer(Layers.for_class('solar_thermal', geojson))
        markers
    },
    
    'ocean_river-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/oceanriver-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('ocean_river diamond', cluster, L.point(30, 30))
        })
        markers.addLayer(Layers.for_class('ocean_river diamond', geojson, 45, L.point(30, 30)))
        markers
    },
    'heat_recovery-refp': {
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/heat_recovery-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('heat_recovery', cluster)
        })
        markers.addLayer(Layers.for_class('heat_recovery', geojson))
        markers
    },
    'sawmills': { 
      type: 'geojson',
      url: '/data/aedi-data-2013/biomass/sawmills/sawmills.geojson', 
      layer: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('sawmills', cluster)
        })
        markers.addLayer(Layers.for_class('sawmills', geojson))
        markers
    },
    'fish_processor': {
      type: 'geojson',
      url: '/data/aedi-data-2013/biomass/fish_processors/fish_processors.geojson', 
      layer: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: Layers.icons.fish_processor
        })
        markers.addLayer(Layers.fish_processors(geojson))
        markers
    },
    'wind_power': {
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/aea_wind_google/tile/{x}/{y}/{z}',
      layer: null
    },
    'woody_biomass': {
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tiles/aea_forest_biomass_google/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_RGB': {
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_rgb/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_NIR': {
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_nir/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_LiDAR_Hillshade': {
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_dem/tile/{x}/{y}/{z}',
      layer: null
    }
  },
  
  toggle: (name, map) =>
    return false unless Layers.defs[name]?
    
    if Layers.defs[name].layer?
      if map.hasLayer(Layers.defs[name].layer)
        map.removeLayer(Layers.defs[name].layer)
        return false
      else
        map.addLayer(Layers.defs[name].layer)
        return true
    else
      Layers.build_layer(Layers.defs[name], map)
      return true
      
  build_layer: (def, map) =>
    switch def.type
      when 'geojson'
        Layers.fetch(def, map)
      when 'tile'
        def.layer = L.tileLayer(def.url)
        map.addLayer(def.layer)
      
  
  fetch: (def, map) =>
    $.getJSON def.url, (data) => 
      def.layer = def.builder(data)
      def.layer.on('')
      map.addLayer def.layer
  
  fish_processors: (geojson) ->
    L.Proj.geoJson(geojson, {
      pointToLayer:  (feature, latlng) =>
        L.marker(latlng, {
          icon: Layers.icons.fish_processor()
        })
          
      onEachFeature: (feature, layer) =>
        if feature.properties? and feature.properties.popup_content?
          layer.bindPopup(feature.properties.popup_content)
    })
    
  for_class: (klass, geojson, angle = 0, iconSize = null) ->
    L.Proj.geoJson(geojson, {
      pointToLayer:  (feature, latlng) =>
        L.rotatedMarker(latlng, {
          icon: Layers.icons.for_class(klass, null, iconSize),
          angle: angle
        })
          
      onEachFeature: (feature, layer) =>
        if feature.properties? and feature.properties.popup_content?
          layer.bindPopup(feature.properties.popup_content)
    })
}