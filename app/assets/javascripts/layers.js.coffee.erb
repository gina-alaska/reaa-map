@Layers = {
  map: null,
  
  icons: {
    coal: L.icon({
      iconUrl: '<%= image_path("icons/coal-32.png") %>',
      iconSize: [32, 32],
      iconAnchor: [16, 16],
      popupAnchor: [16, -3]
    }),
    
    for_class: (klass, cluster = null) ->
      if cluster? and cluster.getChildCount?
        text = cluster.getChildCount() 
      else
        text = ''
        
      return L.divIcon({ html: "<div><span>#{text}</span></div>", className: "base-cluster #{klass}", iconAnchor: new L.Point(16, 16) })
    
    fish_processor: (cluster = null) ->
      if cluster? and cluster.getChildCount?
        text = cluster.getChildCount() 
      else
        text = ''
        
      return L.divIcon({ html: "<div><span>#{text}</span></div>", className: 'base-cluster fish_processor', iconSize: new L.Point(61, 17), iconAnchor: new L.Point(30, 8) })
  },
  
  defs: {
    'solar': {
      name: 'Solar',
      type: 'wms',
      url: 'http://mapsdb.nrel.gov/jw_router/ReAtlas_us_tilt_total/tile',
      layer_name: 'ReAtlas_us_tilt_total'
    },
    'wave_power_potential': {
      name: 'Ocean and River Hydrokinetic - Wave Power Density',
      type: 'wms',
      url: 'http://mapsdb.nrel.gov/jw_router/ReAtlas_wave_energy/tile',
      layer_name: 'ReAtlas_wave_energy'
    },
    'wells_and_springs': {
      name: 'Wells and Springs',
      type: 'geojson',
      url: '/data/aedi-data-2013/geothermal.group/hotsprings/Hotsprings_points_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          maxClusterRadius: 32,
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('clustered wells_and_springs', cluster)
        })
        markers.addLayer(Layers.for_class('wells_and_springs', geojson, 0, (feature, klass) ->
          temp = parseInt(feature.properties.TEMPERATUR)
          switch
            when temp < 55
              return 'level1'
            when temp < 100
              return 'level2'
            when temp < 200
              return 'level3'
            when temp < 300
              return 'level4'
            else
              return 'level5'
        ))
        markers
    },
    
    'potential_geothermal': {
      name: 'Geothermal - Potential',
      type: 'geojson',
      url: '/data/aedi-data-2013/geothermal.group/thermal_areas/thermal_areas.geojson',
      layout: null,
      builder: (geojson) =>
        new L.Proj.geoJson(geojson, {
          style: {
            fillColor: "#FF0000",
            color: "#FF0000",
            weight: 3,
            opacity: 1,
            fillOpacity: 0.4
          }
        })
    },
    
    'in_river_power_potential': {
      name: 'Ocean and River Hydrokinetic - In-River Power Potential',
      type: 'geojson',
      url: '/data/aedi-data-2013/hydrokinetic.group/inriver_potential/inriver_potential.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          maxClusterRadius: 20,          
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('in_river_power_potential level4 round', cluster)
        })
        markers.addLayer(Layers.for_class('in_river_power_potential round', geojson, 0, (feature, klass) ->
          mw = feature.properties.POTENTIAL
          switch mw
            when '50-220'
              return 'level1'
            when '220-450'
              return 'level2'
            when '600-900'
              return 'level3'
            when '1600-1700'
              return 'level4'
            else
              # console.log feature.properties
              return 'level4'
        ))
        markers
    },
    
    'tidal_power_potential': {
      name: 'Ocean and River Hydrokinetic - Tidal Power Potential',
      type: 'geojson',
      url: '/data/aedi-data-2013/hydrokinetic.group/tidal_potential/tidal_potential.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          maxClusterRadius: 32,          
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('tidal_power_potential level3', cluster)
        })
        markers.addLayer(Layers.for_class('tidal_power_potential', geojson, 0, (feature, klass) ->
          mw = parseInt(feature.properties.EGP_MW)
          switch
            when mw < 25
              return 'level1'
            when mw < 100
              return 'level2'
            when mw < 220
              return 'level3'
            else
              return 'level3'
        ))
        markers
    },

    'existing': {
      name: 'Hydroelectric - Existing',
      type: 'geojson',
      url: '/data/aedi-data-2013/hydroelectric.group/existing/ak_hydro_existing_from_master_table_20130923.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          maxClusterRadius: 24,
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('existing level4', cluster)
        })
        markers.addLayer(Layers.for_class('existing', geojson, 0, (feature, klass) ->
          capacity = parseFloat(feature.properties.CapacitykW)
          switch
            when capacity  < 0.1
              return 'level1'
            when capacity  < 1
              return 'level2'
            when capacity  < 10
              return 'level3'
            else
              return 'level4'
        ))
        markers
    },
    
    'investigation': {
      name: 'Hydroelectric - Investigated',
      type: 'geojson',
      url: '/data/aedi-data-2013/hydroelectric.group/proposed/ak_hydro_investigated_from_master_table_20130823.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          maxClusterRadius: 24,
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('investigation level4', cluster)
        })
        markers.addLayer(Layers.for_class('investigation', geojson, 0, (feature, klass) ->
          capacity = parseFloat(feature.properties.CapacitykW)
          switch
            when capacity  < 0.1
              return 'level1'
            when capacity  < 1
              return 'level2'
            when capacity  < 10
              return 'level3'
            else
              return 'level4'
        ))
        markers
    },
    
    'volcanoes': {
      name: 'Geothermal - Volcanoes',
      type: 'geojson',
      url: '/data/aedi-data-2013/geothermal.group/volcano/VolcanicVents_points_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('volcanoes', cluster)
        })
        markers.addLayer(Layers.for_class('volcanoes', geojson))
        markers
    },
    'landfills': {
      name: 'Biomass - Landfills',
      type: 'geojson',
      url: '/data/aedi-data-2013/biomass/landfills/landfills.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('landfills', cluster)
        })
        markers.addLayer(Layers.for_class('landfills', geojson))
        markers
    },
    'biomass-refp': {
      name: 'Renewable Energy Fund Project - Biomass',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/biomass-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('biomass', cluster)
        })
        markers.addLayer(Layers.for_class('biomass', geojson))
        markers
    },
  
    'geothermal-refp': {
      name: 'Renewable Energy Fund Project - Geothermal',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/geothermal-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('geothermal', cluster)
        })
        markers.addLayer(Layers.for_class('geothermal', geojson))
        markers
    },
    'hydro-refp': {
      name: 'Renewable Energy Fund Project - Hydro',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/hydro-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('hydro', cluster)
        })
        markers.addLayer(Layers.for_class('hydro', geojson))
        markers
    },
    'wind-refp': {
      name: 'Renewable Energy Fund Project - Wind',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/wind-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('wind', cluster)
        })
        markers.addLayer(Layers.for_class('wind', geojson))
        markers
    },
    'transmission-refp': {
      name: 'Renewable Energy Fund Project - Transmission',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/transmission-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('transmission', cluster)
        })
        markers.addLayer(Layers.for_class('transmission', geojson))
        markers
    },
    'solar_thermal-refp': {
      name: 'Renewable Energy Fund Project - Solar',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/solar_thermal-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('solar_thermal', cluster)
        })
        markers.addLayer(Layers.for_class('solar_thermal', geojson))
        markers
    },
    
    'ocean_river-refp': {
      name: 'Renewable Energy Fund Project - Ocean/River',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/oceanriver-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('ocean_river diamond', cluster)
        })
        markers.addLayer(Layers.for_class('ocean_river diamond', geojson, 45))
        markers
    },
    'heat_recovery-refp': {
      name: 'Renewable Energy Fund Project - Heat Recovery',
      type: 'geojson',
      url: '/data/aedi-data-2013/renewable_energy_fund_sites/heat_recovery-renewable_energy_fund_sites_2013.geojson',
      layout: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('heat_recovery', cluster)
        })
        markers.addLayer(Layers.for_class('heat_recovery', geojson))
        markers
    },
    'sawmills': { 
      name: 'Biomass - Sawmills',
      type: 'geojson',
      url: '/data/aedi-data-2013/biomass/sawmills/sawmills.geojson', 
      layer: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: (cluster) ->
            Layers.icons.for_class('sawmills', cluster)
        })
        markers.addLayer(Layers.for_class('sawmills', geojson))
        markers
    },
    'fish_processor': {
      name: 'Biomass - Fish Processor',
      type: 'geojson',
      url: '/data/aedi-data-2013/biomass/fish_processors/fish_processors.geojson', 
      layer: null,
      builder: (geojson) =>
        markers = new L.MarkerClusterGroup({
          iconCreateFunction: Layers.icons.fish_processor
        })
        markers.addLayer(Layers.fish_processors(geojson))
        markers
    },
    'wind_power': {
      name: 'Wind Power'
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/aea_wind_google/tile/{x}/{y}/{z}',
      layer: null
    },
    'woody_biomass': {
      name: 'Biomass - Woody',
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tiles/aea_forest_biomass_google/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_RGB': {
      name: 'MatSu 2011 RGB WMS',
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_rgb/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_NIR': {
      name: 'MatSu 2011 NIR WMS',
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_nir/tile/{x}/{y}/{z}',
      layer: null
    },
    'MatSu_2011_LiDAR_Hillshade': {
      name: 'MatSu 2011 LiDAR Hillshade WMS',
      type: 'tile',
      url: 'http://tiles.gina.alaska.edu/tilesrv/matsu_dem/tile/{x}/{y}/{z}',
      layer: null
    }
  },
  
  toggle: (name, map) =>
    return false unless Layers.defs[name]?
    
    if Layers.defs[name].layer?
      if map.hasLayer(Layers.defs[name].layer)
        map.removeLayer(Layers.defs[name].layer)
        return false
      else
        map.addLayer(Layers.defs[name].layer)
        return true
    else
      Layers.build_layer(Layers.defs[name], map)
      return true
      
  build_layer: (def, map) =>
    switch def.type
      when 'geojson'
        Layers.fetch(def, map)
      when 'wms'
        def.layer = L.tileLayer.wms(def.url, {
          layers: def.layer_name,
          format: 'image/png',
          transparent: true
        })
        map.addLayer(def.layer, def.name)
      when 'tile'
        def.layer = L.tileLayer(def.url)
        map.addLayer(def.layer, def.name)
      
  
  fetch: (def, map) =>
    $.getJSON def.url, (data) => 
      def.layer = def.builder(data)
      map.addLayer def.layer, def.name
  
  fish_processors: (geojson) ->
    L.Proj.geoJson(geojson, {
      pointToLayer:  (feature, latlng) =>
        L.marker(latlng, {
          icon: Layers.icons.fish_processor()
        })
          
      onEachFeature: (feature, layer) =>
        if feature.properties? and feature.properties.popup_content?
          layer.bindPopup(feature.properties.popup_content)
    })
    
  for_class: (klass, geojson, angle = 0, styler = null) ->
    L.Proj.geoJson(geojson, {
      pointToLayer:  (feature, latlng) =>    
        extended_style = ''    
        if styler?
          extended_style = styler(feature, klass)
      
        L.rotatedMarker(latlng, {
          icon: Layers.icons.for_class("#{klass} #{extended_style}", null),
          angle: angle
        })
          
      onEachFeature: (feature, layer) =>
        if feature.properties?
          if feature.properties.popup_content?
            layer.bindPopup(feature.properties.popup_content)
          else 
            popup = ""
            if feature.properties.NAME
              popup += "<h5>#{feature.properties.NAME}</h5>"
            else if feature.properties.Project
              popup += "<h5>#{feature.properties.Project}</h5>"
              
            if feature.properties.RptLink
              popup += "<p><a href=\"#{feature.properties.RptLink}\" target=\"_blank\">#{feature.properties.RptLink}</a></p>"
              
            if popup.length > 0
              layer.bindPopup(popup) 
            
    })
}